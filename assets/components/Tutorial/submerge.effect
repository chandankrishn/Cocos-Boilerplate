CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        # 自定义参数
        center: {
          value: [0.5, 0.5], editor: { tooltip: "光圈起点" }
        }
        size: { 
            value: [500.0, 500.0], editor: { tooltip: '节点尺寸' } 
        }
        waterColor: {
          value: [0.0, 0.0, 1.0, 1.0]
        }
        width: {
          value: 0.01, editor: { tooltip: "光圈模糊程度" }
        }
        height: {
          value: 0.5, editor: { tooltip: "光圈半径" }
        }
        round: {
          value: 0.1, editor: { tooltip: "光圈起点" }
        }
        feather: {
          value: 0.05, editor: { tooltip: "光圈起点" }
        }
        waterLevel: {
          value: 0.01, editor: { tooltip: "光圈模糊程度" }
        }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 v_color;
  out vec2 v_uv0;

  #if USE_TEXTURE
    in vec2 a_uv0;
  #endif

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
      v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    v_uv0 = a_texCoord;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec2 v_uv0;
  in vec4 v_color;

  #if USE_TEXTURE
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  uniform ARGS{
    vec2 center;
    vec2 size;
    vec4 waterColor;
    float width;
    float height;
    float round;
    float feather;
    float waterLevel;  // Add a property for the water level
  };

  vec4 frag () {
    vec4 color = vec4(1.0);

    float alpha = texture(cc_spriteTexture, v_uv0).a;
    if (alpha > 0.0) {
    // Calculate the submergence factor based on the fragment's Y-coordinate
    float submergence = clamp((v_uv0.y - waterLevel) / (1.0 - waterLevel), 0.0, 1.0);
    
    // Modify color and transparency based on submergence
    color.rgb = mix(v_color.rgb, waterColor.rgb, submergence);
      color.a = v_color.a;

    // Apply existing spotlight logic here...
    
    ALPHA_TEST(color);
     float x = v_uv0.x;
      float y = v_uv0.y;
    } else {
      discard;
    }

    return color;
  }
}%